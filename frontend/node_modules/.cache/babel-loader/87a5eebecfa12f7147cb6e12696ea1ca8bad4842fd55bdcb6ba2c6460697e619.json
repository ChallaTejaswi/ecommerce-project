{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ISWARY\\\\Downloads\\\\n\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_WEBHOOK_URL = 'http://localhost:3000/api/webhook';\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  useEffect(() => {\n    setMessages([{\n      id: 1,\n      text: 'Hello! Welcome to Meesho Shopping Assistant. How can I help you today?',\n      sender: 'bot',\n      timestamp: new Date()\n    }]);\n  }, []);\n  const sendMessage = async (textToSend = message) => {\n    if (textToSend.trim() === '') return;\n    const userMessage = {\n      id: Date.now(),\n      text: textToSend,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setMessage('');\n    setLoading(true);\n    try {\n      const response = await axios.post(BACKEND_WEBHOOK_URL, {\n        queryResult: {\n          queryText: textToSend\n        }\n      });\n      const botResponseData = response.data;\n      let botMessageText = 'I am not sure how to respond to that.';\n      if (botResponseData && botResponseData.fulfillmentText) {\n        botMessageText = botResponseData.fulfillmentText;\n      }\n      const botMessage = {\n        id: Date.now() + 1,\n        text: botMessageText,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: 'Sorry, I could not connect to the server. Please make sure the backend is running.',\n        sender: 'bot',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n    setLoading(false);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  const quickReplies = ['Find products', 'Track my order', 'Get recommendations'];\n  const handleQuickReply = reply => {\n    sendMessage(reply);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDECD\\uFE0F Shopping Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-content ${msg.isError ? 'error' : ''}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), messages.length > 0 && messages[messages.length - 1].sender === 'bot' && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quick-replies\",\n      children: quickReplies.map((reply, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleQuickReply(reply),\n        className: \"quick-reply-btn\",\n        children: reply\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type your message here...\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(),\n        disabled: loading || !message.trim(),\n        children: loading ? '...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"LY7WOT6xNSjV9oqtfAlRuH0K3Ag=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","BACKEND_WEBHOOK_URL","Chatbot","_s","messages","setMessages","message","setMessage","loading","setLoading","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","id","text","sender","timestamp","Date","sendMessage","textToSend","trim","userMessage","now","prev","response","post","queryResult","queryText","botResponseData","data","botMessageText","fulfillmentText","botMessage","error","console","errorMessage","isError","handleKeyPress","e","key","quickReplies","handleQuickReply","reply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","ref","length","index","onClick","type","value","onChange","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ISWARY/Downloads/n/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './Chatbot.css';\r\n\r\nconst BACKEND_WEBHOOK_URL = 'http://localhost:3000/api/webhook';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    setMessages([\r\n      {\r\n        id: 1,\r\n        text: 'Hello! Welcome to Meesho Shopping Assistant. How can I help you today?',\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  const sendMessage = async (textToSend = message) => {\r\n    if (textToSend.trim() === '') return;\r\n\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text: textToSend,\r\n      sender: 'user',\r\n      timestamp: new Date(),\r\n    };\r\n\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setMessage('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await axios.post(BACKEND_WEBHOOK_URL, {\r\n        queryResult: { queryText: textToSend }\r\n      });\r\n\r\n      const botResponseData = response.data;\r\n      let botMessageText = 'I am not sure how to respond to that.';\r\n\r\n      if (botResponseData && botResponseData.fulfillmentText) {\r\n        botMessageText = botResponseData.fulfillmentText;\r\n      }\r\n\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: botMessageText,\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n      };\r\n\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: 'Sorry, I could not connect to the server. Please make sure the backend is running.',\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        isError: true,\r\n      };\r\n      setMessages((prev) => [...prev, errorMessage]);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const quickReplies = ['Find products', 'Track my order', 'Get recommendations'];\r\n\r\n  const handleQuickReply = (reply) => {\r\n    sendMessage(reply);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <h1>🛍️ Shopping Assistant</h1>\r\n      </div>\r\n\r\n      <div className=\"messages-container\">\r\n        {messages.map((msg) => (\r\n          <div key={msg.id} className={`message ${msg.sender}`}>\r\n            <div className={`message-content ${msg.isError ? 'error' : ''}`}>\r\n              {msg.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {loading && (\r\n          <div className=\"message bot\">\r\n            <div className=\"message-content\">\r\n              <div className=\"typing-indicator\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {messages.length > 0 && messages[messages.length - 1].sender === 'bot' && !loading && (\r\n        <div className=\"quick-replies\">\r\n          {quickReplies.map((reply, index) => (\r\n            <button\r\n              key={index}\r\n              onClick={() => handleQuickReply(reply)}\r\n              className=\"quick-reply-btn\"\r\n            >\r\n              {reply}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type your message here...\"\r\n          disabled={loading}\r\n        />\r\n        <button onClick={() => sendMessage()} disabled={loading || !message.trim()}>\r\n          {loading ? '...' : 'Send'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}