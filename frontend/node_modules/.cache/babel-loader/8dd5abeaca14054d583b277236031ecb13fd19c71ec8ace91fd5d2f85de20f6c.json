{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ISWARY\\\\Downloads\\\\n\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport HomePage from './pages/HomePage';\nimport ProductsPage from './pages/ProductsPage';\nimport CartPage from './pages/CartPage';\nimport Chatbot from './components/Chatbot';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/products\",\n          element: /*#__PURE__*/_jsxDEV(ProductsPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/cart\",\n          element: /*#__PURE__*/_jsxDEV(CartPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-widget\",\n      children: [isChatOpen && /*#__PURE__*/_jsxDEV(Chatbot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chatbot-toggle-button\",\n        onClick: () => setIsChatOpen(!isChatOpen),\n        children: isChatOpen ? '‚úñÔ∏è' : 'üí¨'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1RwI3Rpum6EBbUdSXPo/Ywgstjs=\");\n_c = App;\nexport default App;\n//         id: Date.now() + 1,\n//         text: response.data.fulfillmentText,\n//         sender: 'bot',\n//         timestamp: new Date()\n//       };\n\n//       setMessages(prev => [...prev, botMessage]);\n//     } catch (error) {\n//       const errorMessage = {\n//         id: Date.now() + 1,\n//         text: 'Sorry, I could not connect to the server. Please make sure the backend is running on http://localhost:3000',\n//         sender: 'bot',\n//         timestamp: new Date(),\n//         isError: true\n//       };\n//       setMessages(prev => [...prev, errorMessage]);\n//     }\n\n//     setLoading(false);\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === 'Enter') {\n//       sendMessage();\n//     }\n//   };\n\n//   const quickReplies = ['Find products', 'Track my order', 'Get recommendations'];\n\n//   const handleQuickReply = (reply) => {\n//     setMessage(reply);\n//     // Use a callback in setState to ensure the message is updated before sending\n//     setMessage(reply, () => {\n//       sendMessage();\n//     });\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"chat-container\">\n//         <div className=\"chat-header\">\n//           <h1>üõçÔ∏è Meesho Shopping Assistant</h1>\n//           <p>Your AI-powered shopping companion</p>\n//           <div className=\"status-indicator\">\n//             <span className=\"status-dot\"></span>\n//             Online\n//           </div>\n//         </div>\n\n//         <div className=\"messages-container\">\n//           {messages.map((msg) => (\n//             <div key={msg.id} className={`message ${msg.sender}`}>\n//               <div className={`message-content ${msg.isError ? 'error' : ''}`}>\n//                 {msg.text}\n//               </div>\n//               <div className=\"message-time\">\n//                 {msg.timestamp.toLocaleTimeString()}\n//               </div>\n//             </div>\n//           ))}\n\n//           {loading && (\n//             <div className=\"message bot\">\n//               <div className=\"message-content\">\n//                 <div className=\"typing-indicator\">\n//                   <span></span>\n//                   <span></span>\n//                   <span></span>\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n\n//           {messages.length === 1 && (\n//             <div className=\"quick-replies\">\n//               <p>Try these options:</p>\n//               <div className=\"quick-replies-buttons\">\n//                 {quickReplies.map((reply, index) => (\n//                   <button \n//                     key={index}\n//                     onClick={() => handleQuickReply(reply)}\n//                     className=\"quick-reply-btn\"\n//                   >\n//                     {reply}\n//                   </button>\n//                 ))}\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         <div className=\"input-container\">\n//           <input\n//             type=\"text\"\n//             value={message}\n//             onChange={(e) => setMessage(e.target.value)}\n//             onKeyPress={handleKeyPress}\n//             placeholder=\"Type your message here...\"\n//             disabled={loading}\n//           />\n//           <button onClick={sendMessage} disabled={loading || !message.trim()}>\n//             {loading ? '...' : 'Send'}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n//export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Routes","Route","Navbar","HomePage","ProductsPage","CartPage","Chatbot","jsxDEV","_jsxDEV","App","_s","isChatOpen","setIsChatOpen","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ISWARY/Downloads/n/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport HomePage from './pages/HomePage';\r\nimport ProductsPage from './pages/ProductsPage';\r\nimport CartPage from './pages/CartPage';\r\nimport Chatbot from './components/Chatbot';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [isChatOpen, setIsChatOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <main className=\"main-content\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/products\" element={<ProductsPage />} />\r\n          <Route path=\"/cart\" element={<CartPage />} />\r\n        </Routes>\r\n      </main>\r\n\r\n      {/* Chatbot Widget Integration */}\r\n      <div className=\"chatbot-widget\">\r\n        {/* Render Chatbot component only when isChatOpen is true */}\r\n        {isChatOpen && <Chatbot />}\r\n        <button\r\n          className=\"chatbot-toggle-button\"\r\n          onClick={() => setIsChatOpen(!isChatOpen)}\r\n        >\r\n          {isChatOpen ? '‚úñÔ∏è' : 'üí¨'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n//         id: Date.now() + 1,\r\n//         text: response.data.fulfillmentText,\r\n//         sender: 'bot',\r\n//         timestamp: new Date()\r\n//       };\r\n\r\n//       setMessages(prev => [...prev, botMessage]);\r\n//     } catch (error) {\r\n//       const errorMessage = {\r\n//         id: Date.now() + 1,\r\n//         text: 'Sorry, I could not connect to the server. Please make sure the backend is running on http://localhost:3000',\r\n//         sender: 'bot',\r\n//         timestamp: new Date(),\r\n//         isError: true\r\n//       };\r\n//       setMessages(prev => [...prev, errorMessage]);\r\n//     }\r\n\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   const handleKeyPress = (e) => {\r\n//     if (e.key === 'Enter') {\r\n//       sendMessage();\r\n//     }\r\n//   };\r\n\r\n//   const quickReplies = ['Find products', 'Track my order', 'Get recommendations'];\r\n\r\n//   const handleQuickReply = (reply) => {\r\n//     setMessage(reply);\r\n//     // Use a callback in setState to ensure the message is updated before sending\r\n//     setMessage(reply, () => {\r\n//       sendMessage();\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div className=\"chat-container\">\r\n//         <div className=\"chat-header\">\r\n//           <h1>üõçÔ∏è Meesho Shopping Assistant</h1>\r\n//           <p>Your AI-powered shopping companion</p>\r\n//           <div className=\"status-indicator\">\r\n//             <span className=\"status-dot\"></span>\r\n//             Online\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"messages-container\">\r\n//           {messages.map((msg) => (\r\n//             <div key={msg.id} className={`message ${msg.sender}`}>\r\n//               <div className={`message-content ${msg.isError ? 'error' : ''}`}>\r\n//                 {msg.text}\r\n//               </div>\r\n//               <div className=\"message-time\">\r\n//                 {msg.timestamp.toLocaleTimeString()}\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n          \r\n//           {loading && (\r\n//             <div className=\"message bot\">\r\n//               <div className=\"message-content\">\r\n//                 <div className=\"typing-indicator\">\r\n//                   <span></span>\r\n//                   <span></span>\r\n//                   <span></span>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n\r\n//           {messages.length === 1 && (\r\n//             <div className=\"quick-replies\">\r\n//               <p>Try these options:</p>\r\n//               <div className=\"quick-replies-buttons\">\r\n//                 {quickReplies.map((reply, index) => (\r\n//                   <button \r\n//                     key={index}\r\n//                     onClick={() => handleQuickReply(reply)}\r\n//                     className=\"quick-reply-btn\"\r\n//                   >\r\n//                     {reply}\r\n//                   </button>\r\n//                 ))}\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"input-container\">\r\n//           <input\r\n//             type=\"text\"\r\n//             value={message}\r\n//             onChange={(e) => setMessage(e.target.value)}\r\n//             onKeyPress={handleKeyPress}\r\n//             placeholder=\"Type your message here...\"\r\n//             disabled={loading}\r\n//           />\r\n//           <button onClick={sendMessage} disabled={loading || !message.trim()}>\r\n//             {loading ? '...' : 'Send'}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n//export default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEnD,oBACES,OAAA;IAAKK,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBN,OAAA,CAACN,MAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVV,OAAA;MAAMK,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC5BN,OAAA,CAACR,MAAM;QAAAc,QAAA,gBACLN,OAAA,CAACP,KAAK;UAACkB,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEZ,OAAA,CAACL,QAAQ;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzCV,OAAA,CAACP,KAAK;UAACkB,IAAI,EAAC,WAAW;UAACC,OAAO,eAAEZ,OAAA,CAACJ,YAAY;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrDV,OAAA,CAACP,KAAK;UAACkB,IAAI,EAAC,OAAO;UAACC,OAAO,eAAEZ,OAAA,CAACH,QAAQ;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGPV,OAAA;MAAKK,SAAS,EAAC,gBAAgB;MAAAC,QAAA,GAE5BH,UAAU,iBAAIH,OAAA,CAACF,OAAO;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1BV,OAAA;QACEK,SAAS,EAAC,uBAAuB;QACjCQ,OAAO,EAAEA,CAAA,KAAMT,aAAa,CAAC,CAACD,UAAU,CAAE;QAAAG,QAAA,EAEzCH,UAAU,GAAG,IAAI,GAAG;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACR,EAAA,CA3BQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AA6BZ,eAAeA,GAAG;AACla,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}