{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n// Browser Speech Recognition API\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst browserSupportsSpeechRecognition = !!SpeechRecognition;\nexport const useVoiceRecognition = () => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    if (!browserSupportsSpeechRecognition) return;\n    const recognitionInstance = new SpeechRecognition();\n    recognitionInstance.continuous = false;\n    recognitionInstance.interimResults = false;\n    recognitionInstance.lang = 'en-US';\n    recognitionInstance.onstart = () => {\n      setIsListening(true);\n    };\n    recognitionInstance.onend = () => {\n      setIsListening(false);\n    };\n    recognitionInstance.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setTranscript(transcript);\n    };\n    recognitionInstance.onerror = event => {\n      console.error('Speech recognition error:', event.error);\n      setIsListening(false);\n    };\n    setRecognition(recognitionInstance);\n    return () => {\n      recognitionInstance.stop();\n    };\n  }, []);\n  const startListening = useCallback(() => {\n    if (recognition && !isListening) {\n      setTranscript('');\n      recognition.start();\n    }\n  }, [recognition, isListening]);\n  const stopListening = useCallback(() => {\n    if (recognition && isListening) {\n      recognition.stop();\n    }\n  }, [recognition, isListening]);\n  const resetTranscript = useCallback(() => {\n    setTranscript('');\n  }, []);\n  return {\n    isListening,\n    transcript,\n    startListening,\n    stopListening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  };\n};\n_s(useVoiceRecognition, \"hBOXA0LQxfDL9HD3lrDrBE6keUI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","SpeechRecognition","window","webkitSpeechRecognition","browserSupportsSpeechRecognition","useVoiceRecognition","_s","isListening","setIsListening","transcript","setTranscript","recognition","setRecognition","recognitionInstance","continuous","interimResults","lang","onstart","onend","onresult","event","results","onerror","console","error","stop","startListening","start","stopListening","resetTranscript"],"sources":["C:/Users/ISWARY/Downloads/n/frontend/src/hooks/useVoiceRecognition.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\n\r\n// Browser Speech Recognition API\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst browserSupportsSpeechRecognition = !!SpeechRecognition;\r\n\r\nexport const useVoiceRecognition = () => {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [recognition, setRecognition] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!browserSupportsSpeechRecognition) return;\r\n\r\n    const recognitionInstance = new SpeechRecognition();\r\n    recognitionInstance.continuous = false;\r\n    recognitionInstance.interimResults = false;\r\n    recognitionInstance.lang = 'en-US';\r\n\r\n    recognitionInstance.onstart = () => {\r\n      setIsListening(true);\r\n    };\r\n\r\n    recognitionInstance.onend = () => {\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognitionInstance.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      setTranscript(transcript);\r\n    };\r\n\r\n    recognitionInstance.onerror = (event) => {\r\n      console.error('Speech recognition error:', event.error);\r\n      setIsListening(false);\r\n    };\r\n\r\n    setRecognition(recognitionInstance);\r\n\r\n    return () => {\r\n      recognitionInstance.stop();\r\n    };\r\n  }, []);\r\n\r\n  const startListening = useCallback(() => {\r\n    if (recognition && !isListening) {\r\n      setTranscript('');\r\n      recognition.start();\r\n    }\r\n  }, [recognition, isListening]);\r\n\r\n  const stopListening = useCallback(() => {\r\n    if (recognition && isListening) {\r\n      recognition.stop();\r\n    }\r\n  }, [recognition, isListening]);\r\n\r\n  const resetTranscript = useCallback(() => {\r\n    setTranscript('');\r\n  }, []);\r\n\r\n  return {\r\n    isListening,\r\n    transcript,\r\n    startListening,\r\n    stopListening,\r\n    resetTranscript,\r\n    browserSupportsSpeechRecognition\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;;AAExD;AACA,MAAMC,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;AACpF,MAAMC,gCAAgC,GAAG,CAAC,CAACH,iBAAiB;AAE5D,OAAO,MAAMI,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,gCAAgC,EAAE;IAEvC,MAAMS,mBAAmB,GAAG,IAAIZ,iBAAiB,CAAC,CAAC;IACnDY,mBAAmB,CAACC,UAAU,GAAG,KAAK;IACtCD,mBAAmB,CAACE,cAAc,GAAG,KAAK;IAC1CF,mBAAmB,CAACG,IAAI,GAAG,OAAO;IAElCH,mBAAmB,CAACI,OAAO,GAAG,MAAM;MAClCT,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC;IAEDK,mBAAmB,CAACK,KAAK,GAAG,MAAM;MAChCV,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IAEDK,mBAAmB,CAACM,QAAQ,GAAIC,KAAK,IAAK;MACxC,MAAMX,UAAU,GAAGW,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACZ,UAAU;MACjDC,aAAa,CAACD,UAAU,CAAC;IAC3B,CAAC;IAEDI,mBAAmB,CAACS,OAAO,GAAIF,KAAK,IAAK;MACvCG,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEJ,KAAK,CAACI,KAAK,CAAC;MACvDhB,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IAEDI,cAAc,CAACC,mBAAmB,CAAC;IAEnC,OAAO,MAAM;MACXA,mBAAmB,CAACY,IAAI,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,cAAc,GAAG1B,WAAW,CAAC,MAAM;IACvC,IAAIW,WAAW,IAAI,CAACJ,WAAW,EAAE;MAC/BG,aAAa,CAAC,EAAE,CAAC;MACjBC,WAAW,CAACgB,KAAK,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAAChB,WAAW,EAAEJ,WAAW,CAAC,CAAC;EAE9B,MAAMqB,aAAa,GAAG5B,WAAW,CAAC,MAAM;IACtC,IAAIW,WAAW,IAAIJ,WAAW,EAAE;MAC9BI,WAAW,CAACc,IAAI,CAAC,CAAC;IACpB;EACF,CAAC,EAAE,CAACd,WAAW,EAAEJ,WAAW,CAAC,CAAC;EAE9B,MAAMsB,eAAe,GAAG7B,WAAW,CAAC,MAAM;IACxCU,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLH,WAAW;IACXE,UAAU;IACViB,cAAc;IACdE,aAAa;IACbC,eAAe;IACfzB;EACF,CAAC;AACH,CAAC;AAACE,EAAA,CA/DWD,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}