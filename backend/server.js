const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();
const { translate } = require('./src/utils/translate');

const app = express();
const PORT = process.env.PORT || 7654; // Port set to 7654 as per your code

// Database connection
const connectDB = async () => {
  try {
    if (process.env.MONGODB_URI) {
      console.log('ЁЯФД Attempting to connect to MongoDB Atlas...');
      
      const conn = await mongoose.connect(process.env.MONGODB_URI, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        serverSelectionTimeoutMS: 15000, // Match test settings - 15 seconds
        socketTimeoutMS: 45000,
        family: 4, // Use IPv4, skip trying IPv6
        maxPoolSize: 10,
        retryWrites: true,
        w: 'majority',
        connectTimeoutMS: 15000 // Add connection timeout
      });
      
      console.log(`тЬЕ MongoDB Connected: ${conn.connection.host}`);
      console.log(`ЁЯУК Database: ${conn.connection.name}`);
      
      // Test database access safely
      try {
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log(`ЁЯУБ Found ${collections.length} collections`);
      } catch (dbError) {
        console.log('тЪая╕П Could not list collections, but connection is established');
      }
      
      // Handle connection events
      mongoose.connection.on('error', (err) => {
        console.error('тЭМ MongoDB connection error:', err.message);
      });

      mongoose.connection.on('disconnected', () => {
        console.log('тЪая╕П MongoDB disconnected. Attempting to reconnect...');
      });

      mongoose.connection.on('reconnected', () => {
        console.log('тЬЕ MongoDB reconnected successfully');
      });

    } else {
      console.log('тЪая╕П  No MongoDB URI provided, running without database');
    }
  } catch (error) {
    console.error('тЭМ MongoDB connection error:', error.message);
    
    // If it's a network timeout, suggest potential solutions
    if (error.message.includes('ETIMEOUT') || error.message.includes('querySrv')) {
      console.log('ЁЯФз Network connection troubleshooting:');
      console.log('   1. Check your internet connection');
      console.log('   2. Verify Atlas cluster is running (not paused)');
      console.log('   3. Check IP whitelist in Atlas dashboard');
      console.log('   4. Verify network firewall settings');
    }
    
    console.log('тЪая╕П  Continuing without database in development mode');
  }
};

// Don't connect immediately - will connect later with server start

// Multilingual pattern matching function
function getMultilingualPatterns(languageCode) {
  const patterns = {
    'en': {
      orderTracking: /track.*order|order.*status|where.*order|check.*order|my.*order|show.*my.*order|order.*history|all.*my.*order|where.*are.*my.*order/i,
      productSearch: /show.*me|find|search|looking.*for|want|need/i,
      greeting: /hello|hi|hey|good morning|good afternoon|good evening/i,
      help: /help|what can you do|assistance/i,
      complaint: /terrible|awful|bad|horrible|worst|complain|refund|return|cancel|problem|issue|angry|frustrated/i
    },
    'hi': {
      orderTracking: /рдСрд░реНрдбрд░.*рдЯреНрд░реИрдХ|рдСрд░реНрдбрд░.*рд╕реНрдерд┐рддрд┐|рдореЗрд░рд╛.*рдСрд░реНрдбрд░|рдСрд░реНрдбрд░.*рдХрд╣рд╛рдБ|рдСрд░реНрдбрд░.*рджреЗрдЦреЛ/i,
      productSearch: /рджрд┐рдЦрд╛рдУ|рдЦреЛрдЬреЛ|рдЪрд╛рд╣рд┐рдП|рдвреВрдВрдвреЛ|рджреЗрдЦрдирд╛.*рдЪрд╛рд╣рддреЗ/i,
      greeting: /рдирдорд╕реНрддреЗ|рд╣реИрд▓реЛ|рд╣рд╛рдп|рдирдорд╕реНрдХрд╛рд░/i,
      help: /рдорджрдж|рд╕рд╣рд╛рдпрддрд╛|рдХреНрдпрд╛.*рдХрд░.*рд╕рдХрддреЗ/i,
      complaint: /рдмреБрд░рд╛|рдЦрд░рд╛рдм|рд╕рдорд╕реНрдпрд╛|рд╢рд┐рдХрд╛рдпрдд|рд░рд┐рдлрдВрдб|рд╡рд╛рдкрд╕реА/i
    },
    'gu': {
      orderTracking: /ркУрк░рлНркбрк░.*ркЯрлНрк░рлЗркХ|ркУрк░рлНркбрк░.*рк╕рлНркерк┐ркдрк┐|ркорк╛рк░рлЛ.*ркУрк░рлНркбрк░/i,
      productSearch: /ркмркдрк╛рк╡рлЛ|рк╢рлЛркзрлЛ|ркЬрлЛркИркП|ркЦрлЛркЬрлЛ/i,
      greeting: /ркиркорк╕рлНркдрлЗ|рк╣рлЗрк▓рлЛ|ркиркорк╕рлНркХрк╛рк░/i,
      help: /ркоркжркж|рк╕рк╣рк╛ркп/i,
      complaint: /ркЦрк░рк╛ркм|рк╕ркорк╕рлНркпрк╛|рклрк░рк┐ркпрк╛ркж/i
    },
    'ta': {
      orderTracking: /роЖро░рпНроЯро░рпН.*роЯрпНро░ро╛роХрпН|роЖро░рпНроЯро░рпН.*роиро┐ро▓рпИ|роОройрпН.*роЖро░рпНроЯро░рпН/i,
      productSearch: /роХро╛роЯрпНроЯрпБ|родрпЗроЯрпБ|ро╡рпЗрогрпНроЯрпБроорпН|роХрогрпНроЯрпБрокро┐роЯро┐/i,
      greeting: /ро╡рогроХрпНроХроорпН|ро╣ро▓рпЛ/i,
      help: /роЙродро╡ро┐|роОройрпНрой.*роЪрпЖропрпНроп.*роорпБроЯро┐ропрпБроорпН/i,
      complaint: /роорпЛроЪрооро╛рой|рокро┐ро░роЪрпНроЪройрпИ|рокрпБроХро╛ро░рпН/i
    },
    'te': {
      orderTracking: /р░Жр░░р▒Нр░бр░░р▒Н.*р░Яр▒Нр░░р░╛р░Хр▒Н|р░Жр░░р▒Нр░бр░░р▒Н.*р░╕р▒Нр░ер░┐р░др░┐|р░ир░╛.*р░Жр░░р▒Нр░бр░░р▒Н/i,
      productSearch: /р░Ър▒Вр░кр░┐р░Вр░Ър▒Б|р░╡р▒Жр░др░Хр▒Б|р░Хр░╛р░╡р░╛р░▓р░┐|р░Хр░ир▒Бр░Чр▒Кр░ир▒Б/i,
      greeting: /р░ир░ор░╕р▒Нр░др▒З|р░╣р░▓р▒Л/i,
      help: /р░╕р░╣р░╛р░пр░В|р░Пр░ор░┐.*р░Ър▒Зр░пр░Чр░▓р░░р▒Б/i,
      complaint: /р░Ър▒Жр░бр▒Нр░б|р░╕р░ор░╕р▒Нр░п|р░лр░┐р░░р▒Нр░пр░╛р░жр▒Б/i
    },
    'mr': {
      orderTracking: /рдСрд░реНрдбрд░.*рдЯреНрд░реЕрдХ|рдСрд░реНрдбрд░.*рд╕реНрдерд┐рддреА|рдорд╛рдЭрд╛.*рдСрд░реНрдбрд░/i,
      productSearch: /рджрд╛рдЦрд╡рд╛|рд╢реЛрдзрд╛|рд╣рд╡реЗ|рд╢реЛрдзреВрди рдХрд╛рдврд╛/i,
      greeting: /рдирдорд╕реНрдХрд╛рд░|рд╣реЕрд▓реЛ/i,
      help: /рдорджрдд|рдХрд╛рдп.*рдХрд░реВ рд╢рдХрддрд╛/i,
      complaint: /рд╡рд╛рдИрдЯ|рд╕рдорд╕реНрдпрд╛|рддрдХреНрд░рд╛рд░/i
    }
  };
  
  return patterns[languageCode] || patterns['en']; // Default to English
}

// Localized responses function
function getLocalizedResponse(type, languageCode) {
  const responses = {
    'complaint': {
      'en': `ЁЯдЭ I understand your concern and I want to help resolve this immediately. 

Your feedback is important to us, and I'm here to personally assist you. 

Here's what I can do right away:
тАв Connect you with our senior support team
тАв Process any returns or refunds if needed
тАв Escalate this to a manager for priority handling

How would you prefer to resolve this issue?`,
      'hi': `ЁЯдЭ рдореИрдВ рдЖрдкрдХреА рдЪрд┐рдВрддрд╛ рд╕рдордЭрддрд╛ рд╣реВрдВ рдФрд░ рддреБрд░рдВрдд рдЗрд╕реЗ рд╣рд▓ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВред

рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ, рдФрд░ рдореИрдВ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд░реВрдк рд╕реЗ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред

рдореИрдВ рддреБрд░рдВрдд рдпрд╣ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:
тАв рдЖрдкрдХреЛ рд╣рдорд╛рд░реА рд╡рд░рд┐рд╖реНрда рд╕рд╣рд╛рдпрддрд╛ рдЯреАрдо рд╕реЗ рдЬреЛрдбрд╝рдирд╛
тАв рдХреЛрдИ рднреА рд░рд┐рдЯрд░реНрди рдпрд╛ рд░рд┐рдлрдВрдб рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдирд╛
тАв рдЗрд╕реЗ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдХреЗ рд▓рд┐рдП рдореИрдиреЗрдЬрд░ рддрдХ рдкрд╣реБрдВрдЪрд╛рдирд╛

рдЖрдк рдЗрд╕ рдореБрджреНрджреЗ рдХреЛ рдХреИрд╕реЗ рд╣рд▓ рдХрд░рдирд╛ рдкрд╕рдВрдж рдХрд░реЗрдВрдЧреЗ?`,
      'gu': `ЁЯдЭ рк╣рлБркВ ркдркорк╛рк░рлА ркЪрк┐ркВркдрк╛ рк╕ркоркЬрлБркВ ркЫрлБркВ ркЕркирлЗ ркдрк░ркд ркЬ ркЖркирлЗ ркЙркХрлЗрк▓рк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рк╡рк╛ ркорк╛ркВркЧрлБ ркЫрлБркВред

ркдркорк╛рк░рлЛ рккрлНрк░ркдрк┐ркнрк╛рк╡ ркЕркорк╛рк░рк╛ ркорк╛ркЯрлЗ ркорк╣ркдрлНрк╡рккрлВрк░рлНркг ркЫрлЗ, ркЕркирлЗ рк╣рлБркВ рк╡рлНркпркХрлНркдрк┐ркЧркд рк░рлВрккрлЗ ркдркорк╛рк░рлА рк╕рк╣рк╛ркп ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркЕрк╣рлАркВ ркЫрлБркВред

рк╣рлБркВ ркдрк░ркд ркЬ ркЖ ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ:
тАв ркдркоркирлЗ ркЕркорк╛рк░рлА рк╡рк░рк┐рк╖рлНрка рк╕рк╣рк╛ркп ркЯрлАрко рк╕рк╛ркерлЗ ркЬрлЛркбрк╡рлБркВ
тАв ркХрлЛркИрккркг рк░рк┐ркЯрк░рлНрки ркЕркерк╡рк╛ рк░рк┐рклркВркб рккрлНрк░рлЛрк╕рлЗрк╕ ркХрк░рк╡рлБркВ
тАв рккрлНрк░рк╛ркеркорк┐ркХркдрк╛ ркорк╛ркЯрлЗ ркорлЗркирлЗркЬрк░ рк╕рлБркзрлА рккрк╣рлЛркВркЪрк╛ркбрк╡рлБркВ

ркдркорлЗ ркЖ ркорлБркжрлНркжрк╛ркирлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ рк╣рк▓ ркХрк░рк╡рк╛ркирлБркВ рккрк╕ркВркж ркХрк░рк╢рлЛ?`
    },
    'greeting': {
      'en': `ЁЯСЛ Hello! Welcome to Meesho! I'm your AI shopping assistant.

ЁЯФН Try saying: "Show me dresses" or "Find phones under 20000"
ЁЯУж Track orders: "Track my order ORD123456"
ЁЯТб Get help: "What can you do?"

What would you like to find today?`,
      'hi': `ЁЯСЛ рдирдорд╕реНрддреЗ! рдореАрд╢реЛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдЖрдкрдХрд╛ рдПрдЖрдИ рд╢реЙрдкрд┐рдВрдЧ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред

ЁЯФН рдХрд╣рдХрд░ рджреЗрдЦреЗрдВ: "рдореБрдЭреЗ рдбреНрд░реЗрд╕реЗрд╕ рджрд┐рдЦрд╛рдУ" рдпрд╛ "20000 рдХреЗ рдиреАрдЪреЗ рдлреЛрди рдвреВрдВрдвреЛ"
ЁЯУж рдСрд░реНрдбрд░ рдЯреНрд░реИрдХ рдХрд░реЗрдВ: "рдореЗрд░рд╛ рдСрд░реНрдбрд░ рдЯреНрд░реИрдХ рдХрд░реЛ ORD123456"
ЁЯТб рдорджрдж рдкрд╛рдПрдВ: "рдЖрдк рдХреНрдпрд╛ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?"

рдЖрдЬ рдЖрдк рдХреНрдпрд╛ рдвреВрдВрдврдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?`,
      'gu': `ЁЯСЛ ркиркорк╕рлНркдрлЗ! ркорлАрк╢рлЛркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI рк╢рлЛрккрк┐ркВркЧ рк╕рк╣рк╛ркпркХ ркЫрлБркВред

ЁЯФН ркХрк╣рлАркирлЗ ркЬрлБркУ: "ркоркирлЗ ркбрлНрк░рлЗрк╕ ркмркдрк╛рк╡рлЛ" ркЕркерк╡рк╛ "20000 ркирлАркЪрлЗ рклрлЛрки рк╢рлЛркзрлЛ"
ЁЯУж ркУрк░рлНркбрк░ ркЯрлНрк░рлЗркХ ркХрк░рлЛ: "ркорк╛рк░рлЛ ркУрк░рлНркбрк░ ркЯрлНрк░рлЗркХ ркХрк░рлЛ ORD123456"
ЁЯТб ркоркжркж ркорлЗрк│рк╡рлЛ: "ркдркорлЗ рк╢рлБркВ ркХрк░рлА рк╢ркХрлЛ ркЫрлЛ?"

ркЖркЬрлЗ ркдркорлЗ рк╢рлБркВ рк╢рлЛркзрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?`
    },
    'help': {
      'en': `ЁЯдЦ I'm your Meesho Shopping Assistant! Here's what I can do:

ЁЯФН **Order Tracking:**
тАв "Track my order ORD123456"
тАв "Where is my order?"

ЁЯЫНя╕П **Product Search:**
тАв "Show me dresses"
тАв "Find phones under 20000"
тАв "Search for laptops"

ЁЯТб **Smart Search:**
тАв "Show me red dresses under 3000"
тАв "Find headphones"

Just speak naturally and I'll help you! ЁЯОЩя╕П`,
      'hi': `ЁЯдЦ рдореИрдВ рдЖрдкрдХрд╛ рдореАрд╢реЛ рд╢реЙрдкрд┐рдВрдЧ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВ! рдпрд╣рд╛рдБ рд╣реИ рдЬреЛ рдореИрдВ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:

ЁЯФН **рдСрд░реНрдбрд░ рдЯреНрд░реИрдХрд┐рдВрдЧ:**
тАв "рдореЗрд░рд╛ рдСрд░реНрдбрд░ рдЯреНрд░реИрдХ рдХрд░реЛ ORD123456"
тАв "рдореЗрд░рд╛ рдСрд░реНрдбрд░ рдХрд╣рд╛рдБ рд╣реИ?"

ЁЯЫНя╕П **рдкреНрд░реЛрдбрдХреНрдЯ рд╕рд░реНрдЪ:**
тАв "рдореБрдЭреЗ рдбреНрд░реЗрд╕реЗрд╕ рджрд┐рдЦрд╛рдУ"
тАв "20000 рдХреЗ рдиреАрдЪреЗ рдлреЛрди рдвреВрдВрдвреЛ"
тАв "рд▓реИрдкрдЯреЙрдк рдЦреЛрдЬреЛ"

ЁЯТб **рд╕реНрдорд╛рд░реНрдЯ рд╕рд░реНрдЪ:**
тАв "рдореБрдЭреЗ 3000 рдХреЗ рдиреАрдЪреЗ рд▓рд╛рд▓ рдбреНрд░реЗрд╕реЗрд╕ рджрд┐рдЦрд╛рдУ"
тАв "рд╣реЗрдбрдлреЛрди рдвреВрдВрдвреЛ"

рдмрд╕ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ рдФрд░ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛! ЁЯОЩя╕П`,
      'gu': `ЁЯдЦ рк╣рлБркВ ркдркорк╛рк░рлЛ ркорлАрк╢рлЛ рк╢рлЛрккрк┐ркВркЧ рк╕рк╣рк╛ркпркХ ркЫрлБркВ! ркЕрк╣рлАркВ ркЫрлЗ ркЬрлЗ рк╣рлБркВ ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ:

ЁЯФН **ркУрк░рлНркбрк░ ркЯрлНрк░рлЗркХрк┐ркВркЧ:**
тАв "ркорк╛рк░рлЛ ркУрк░рлНркбрк░ ркЯрлНрк░рлЗркХ ркХрк░рлЛ ORD123456"
тАв "ркорк╛рк░рлЛ ркУрк░рлНркбрк░ ркХрлНркпрк╛ркВ ркЫрлЗ?"

ЁЯЫНя╕П **рккрлНрк░рлЛркбркХрлНркЯ рк╕рк░рлНркЪ:**
тАв "ркоркирлЗ ркбрлНрк░рлЗрк╕ ркмркдрк╛рк╡рлЛ"
тАв "20000 ркирлАркЪрлЗ рклрлЛрки рк╢рлЛркзрлЛ"
тАв "рк▓рлЗрккркЯрлЛркк рк╢рлЛркзрлЛ"

ЁЯТб **рк╕рлНркорк╛рк░рлНркЯ рк╕рк░рлНркЪ:**
тАв "ркоркирлЗ 3000 ркирлАркЪрлЗ рк▓рк╛рк▓ ркбрлНрк░рлЗрк╕ ркмркдрк╛рк╡рлЛ"
тАв "рк╣рлЗркбрклрлЛрки рк╢рлЛркзрлЛ"

рклркХрлНркд ркХрлБркжрк░ркдрлА рк░рлАркдрлЗ рк╡рк╛ркд ркХрк░рлЛ ркЕркирлЗ рк╣рлБркВ ркдркорк╛рк░рлА ркоркжркж ркХрк░рлАрк╢! ЁЯОЩя╕П`
    }
  };
  
  return responses[type]?.[languageCode] || responses[type]?.['en'] || 'Hello! How can I help you?';
}

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001','https://ecommerce-project-x8jv.vercel.app'],
  credentials: true
}));
app.use(express.json());

// Import routes
const productsRouter = require('./routes/products');
const ordersRouter = require('./routes/orders');
const adminRouter = require('./routes/admin');
const authRoutesNew = require('./src/routes/authRoutes');
const cartRoutes = require('./src/routes/cartRoutes');
const agentHandoffRoutes = require('./src/routes/agentHandoffRoutes');
const recommendationRoutes = require('./routes/recommendationRoutes'); // New recommendation routes

// API routes
app.use('/api/products', productsRouter);
app.use('/api/orders', ordersRouter);
app.use('/api/admin', adminRouter);
app.use('/api/auth', authRoutesNew); // New ML-integrated auth routes
app.use('/api/cart', cartRoutes); // ML-integrated cart routes
app.use('/api/recommendations', recommendationRoutes); // New recommendations endpoint
app.use('/api/agent-handoff', agentHandoffRoutes); // ML-based agent handoff system

// Add favicon route to prevent proxy errors
app.get('/favicon.ico', (req, res) => {
  res.status(204).end();
});

// Health check endpoints
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'Meesho Shopping Assistant Backend is running!',
    timestamp: new Date().toISOString()
  });
});

app.get('/api/health', (req, res) => {
  res.json({
    service: 'Meesho Shopping Assistant API',
    status: 'healthy',
    version: '1.0.0'
  });
});

// ML service removed; using Dialogflow only for intent detection and recommendations

// Import required services
const dialogflowService = require('./src/services/dialogflowService');
const AuthController = require('./src/controllers/authController');
const { optionalAuth } = require('./src/middleware/auth');

// Enhanced webhook route with ML-based flow decision engine and user authentication
app.post('/api/webhook', optionalAuth, async (req, res) => {
  try {
    const { queryResult, session, userId: requestUserId, languageCode: requestLanguageCode } = req.body;
    const userMessage = queryResult?.queryText || req.body?.message || 'Hello';
    const userId = req.userId || requestUserId || session?.split('/').pop() || 'anonymous';
    const languageCode = requestLanguageCode || queryResult?.languageCode || req.user?.preferences?.language || 'en';
    
    console.log('ЁЯдЦ Chat message received:', userMessage);
    console.log('ЁЯСд User ID:', userId);
    console.log('ЁЯМР Language:', languageCode);
    console.log('ЁЯФР Authenticated:', req.user ? 'Yes' : 'No');

    let responseText = '';
    let fulfillmentMessages = [];
    let productResults = null;

    // Detect intent using Dialogflow
    const dialogflowResult = await dialogflowService.detectIntent(userId, userMessage, languageCode);
    const { intent, confidence, parameters, flowDecision } = dialogflowResult;

    const normalizedIntent = (intent || '').toLowerCase().replace(/\s+/g, '');
    if (normalizedIntent === 'product.search' || normalizedIntent === 'product_search' || normalizedIntent === 'productsearchintent') {
      try {
        // Use enhanced product search logic
        const { handleProductSearch } = require('./services/enhancedWebhook');
        const searchResult = await handleProductSearch(userMessage, { languageCode });
        productResults = searchResult.products;
        responseText = searchResult.responseText;
      } catch (error) {
        console.error('Product search error:', error);
        responseText = `тЭМ Sorry, I'm having trouble searching products right now. Please try browsing our Products page directly.`;
        productResults = [];
      }
    } else if (normalizedIntent === 'ordertrackingintent' || normalizedIntent === 'order_tracking' || normalizedIntent === 'ordertracking') {
      try {
        const orderTrackingService = require('./services/orderTrackingService');
        // Check authentication
        if (!req.user || !userId || userId === 'anonymous') {
          responseText = 'я┐╜ Please log in to view your order details.';
          productResults = null;
        } else {
          const orderId = orderTrackingService.extractOrderId(userMessage);
          if (orderId) {
            // Specific order ID provided
            const result = await orderTrackingService.trackOrderById(orderId);
            responseText = result.message;
            productResults = null;
          } else {
            // No valid order ID, list all user's orders
            const result = await orderTrackingService.getUserOrders(userId, 5);
            responseText = result.message;
            productResults = null;
          }
        }
      } catch (error) {
        console.error('Order tracking error:', error);
        responseText = `тЭМ Sorry, I'm having trouble accessing order information right now. Please try again later.`;
        productResults = null;
      }
    } else {
      // Handle other intents here (complaint, etc.)
      responseText = 'Intent not handled in this patch.';
    }

    // Update user conversation analytics if authenticated
    if (req.user) {
      await AuthController.updateConversationAnalytics(req.userId, {
        query: userMessage,
        intent: intent,
        sentiment: flowDecision?.sentiment,
        resultCount: productResults?.length || 0
      });
    }

    res.json({
      fulfillmentText: responseText,
      fulfillmentMessages: fulfillmentMessages,
      products: productResults,
      mlAnalysis: {
        flow: flowDecision?.flow,
        sentiment: flowDecision?.sentiment?.sentiment || 'neutral',
        intent: intent,
        confidence: confidence,
        shouldEscalate: flowDecision?.shouldEscalate,
        escalationScore: flowDecision?.escalationScore,
        flowRecommendations: flowDecision?.recommendations
      },
      session: {
        userId: userId,
        conversationState: flowDecision?.userSession,
        authenticated: !!req.user
      },
      userProfile: req.user ? {
        name: req.user.name,
        preferences: req.user.preferences,
        averageSentiment: req.user.conversationAnalytics?.averageSentiment,
        preferredFlow: req.user.conversationAnalytics?.preferredFlow
      } : null
    });
  } catch (error) {
    console.error('тЭМ Webhook error:', error);
    res.json({
      fulfillmentText: 'Hello! Welcome to Meesho Shopping Assistant. How can I help you today?'
    });
  }
});

// AVA Flow Handler - Advanced Virtual Agent
app.handleAVAFlow = async function(userMessage, analysis, userId) {
  const sentiment = analysis?.sentiment;
  const intent = analysis?.intent;
  
  console.log('ЁЯФе AVA Flow Processing:', { sentiment: sentiment?.sentiment, intent: intent?.intent });
  
  // Handle different types of escalated scenarios
  if (sentiment?.isComplaint) {
    return `ЁЯдЭ I understand you have a concern, and I want to help resolve this personally. 

${sentiment.analysis.complaintWords.length > 0 ? 
  `I noticed you mentioned: ${sentiment.analysis.complaintWords.join(', ')}` : ''}

Here's what I can do right away:
тАв Escalate to our senior support team
тАв Arrange immediate callback from a manager
тАв Process any returns/refunds if applicable
тАв Create a priority support ticket

Would you like me to connect you with a human agent, or can I help resolve this directly?`;
  }

  if (intent?.intent === 'order_tracking' && sentiment?.sentiment === 'negative') {
    const orderIdPattern = /\bORD[A-Z0-9]+/i;
    const orderIdMatch = userMessage.match(orderIdPattern);
    
    if (orderIdMatch) {
      // Enhanced order tracking for frustrated customers
      return `ЁЯЪи I understand your concern about order ${orderIdMatch[0]}. Let me prioritize this for you.

I'm escalating this to our senior team who will:
тАв Investigate immediately 
тАв Provide real-time updates
тАв Ensure priority handling
тАв Contact you within 30 minutes

Is there anything urgent I should flag for immediate attention?`;
    }
  }

  return `ЁЯдЭ I sense this is important to you, and I want to give you my full attention. 

Let me connect you with our specialized support team who can provide personalized assistance. 

In the meantime, is there anything urgent I can help you with right now?`;
};

// IVR Flow Handler - Standard responses
app.handleIVRFlow = async function(userMessage, userId) {
  // ...existing product search and order tracking logic...
  const orderTrackingPattern = /track.*order|order.*status|where.*order|order.*(\bORD\w+)/i;
  const orderIdPattern = /\bORD[A-Z0-9]+/i;
  const productSearchPattern = /show.*me|find|search|looking.*for|want|need/i;
  const pricePattern = /under\s+(\d+)|below\s+(\d+)|less.*than\s+(\d+)/i;

  let responseText = '';
  let productResults = null;

  if (orderTrackingPattern.test(userMessage)) {
    // ...existing order tracking code...
    const orderIdMatch = userMessage.match(orderIdPattern);
    
    if (orderIdMatch) {
      const orderId = orderIdMatch[0];
      
      try {
        const Order = require('./models/Order');
        const order = await Order.findOne({ orderId: orderId });
        
        if (order) {
          const statusMessages = {
            'order_placed': 'ЁЯУж Your order has been placed successfully',
            'confirmed': 'тЬЕ Your order has been confirmed and is being prepared',
            'shipped': 'ЁЯЪЪ Your order has been shipped and is on its way',
            'out_for_delivery': 'ЁЯЫ╡ Your order is out for delivery',
            'delivered': 'тЬЕ Your order has been delivered',
            'cancelled': 'тЭМ Your order has been cancelled'
          };
          
          const lastUpdate = order.timeline[order.timeline.length - 1];
          const estimatedDelivery = order.estimatedDelivery ? 
            new Date(order.estimatedDelivery).toLocaleDateString() : 'TBD';
          
          responseText = `ЁЯФН Order Status for ${orderId}

${statusMessages[order.status]}

ЁЯУК Details:
тАв Items: ${order.items.length} items
тАв Total: тВ╣${order.pricing.total}
тАв Status: ${order.status.replace('_', ' ').toUpperCase()}
тАв Estimated Delivery: ${estimatedDelivery}

${order.status === 'delivered' ? 'ЁЯОЙ Thank you for shopping with Meesho!' : ''}`;
        } else {
          responseText = `тЭМ Sorry, I couldn't find order ${orderId}. Please check your order ID and try again.`;
        }
      } catch (error) {
        console.error('Order tracking error:', error);
        responseText = `тЭМ Sorry, I'm having trouble accessing order information right now. Please try again later.`;
      }
    } else {
      responseText = `ЁЯФН I can help you track your order! Please provide your order ID (e.g., "Track order ORD123456") and I'll get the latest status for you.`;
    }
  }
  else if (productSearchPattern.test(userMessage)) {
    // ...existing product search code...
    try {
      const Product = require('./models/Product');
      
      // Extract search terms and price limit
      let searchTerms = [];
      let maxPrice = null;
      
      const priceMatch = userMessage.match(pricePattern);
      if (priceMatch) {
        maxPrice = parseInt(priceMatch[1] || priceMatch[2] || priceMatch[3]);
      }
      
      const keywords = ['dress', 'dresses', 'shirt', 'shirts', 'phone', 'phones', 'laptop', 'laptops', 
                       'headphone', 'headphones', 'shoes', 'jeans', 'jacket', 'watch', 'bag', 'bags'];
      
      keywords.forEach(keyword => {
        if (userMessage.toLowerCase().includes(keyword)) {
          searchTerms.push(keyword);
        }
      });
      
      let searchQuery = {};
      
      if (searchTerms.length > 0) {
        searchQuery.$or = searchTerms.map(term => ({
          $or: [
            { name: { $regex: term, $options: 'i' } },
            { category: { $regex: term, $options: 'i' } }
          ]
        }));
      }
      
      if (maxPrice) {
        searchQuery.price = { $lte: maxPrice };
      }
      
      searchQuery.inStock = true;
      
      const products = await Product.find(searchQuery).limit(8);
      
      if (products.length > 0) {
        productResults = products.map(product => ({
          id: product.id,
          name: product.name,
          price: product.price,
          category: product.category,
          image: product.images?.[0] || product.image || '',
          rating: product.rating?.average || 0,
          inStock: product.inStock
        }));
        
        responseText = `ЁЯЫНя╕П Found ${products.length} products for "${userMessage}". Check them out below!`;
      } else {
        responseText = `ЁЯШФ I couldn't find any products matching "${userMessage}". Try searching for specific items like "dresses", "phones", or "laptops"!`;
      }
    } catch (error) {
      console.error('Product search error:', error);
      responseText = `тЭМ Sorry, I'm having trouble searching products right now. Please try browsing our Products page directly.`;
    }
  }
  else {
    responseText = `I understand you said: "${userMessage}". Try asking me to "Show me dresses" or "Track order ORD123456"!`;
  }

  return { responseText, productResults };
};

// Error handling (for general application errors)
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    message: 'Something went wrong!'
  });
});

// 404 handler (for unmatched routes)
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found'
  });
});

const startServer = () => {
  try {
    const server = app.listen(PORT, '0.0.0.0', () => { // Listening on 0.0.0.0 makes it accessible from network
      console.log(`ЁЯЪА Meesho Shopping Assistant Backend running on port ${PORT}`);
      console.log(`ЁЯУ▒ Health check: http://localhost:${PORT}/health`);
      console.log(`ЁЯФЧ API health: http://localhost:${PORT}/api/health`);
      console.log(`ЁЯЫНя╕П Orders API: http://localhost:${PORT}/api/orders`);
      console.log(`ЁЯСитАНЁЯТ╝ Admin Panel: http://localhost:${PORT}/api/admin`);
      console.log(`ЁЯМР Server listening on all interfaces (0.0.0.0:${PORT})`);
    });

    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        console.error(`тЭМ Port ${PORT} is already in use. Please use a different port or stop the process using this port.`);
        console.log('To find what\'s using the port, run: netstat -ano | findstr :' + PORT);
      } else {
        console.error('тЭМ Server error:', error);
      }
      process.exit(1); // Exit if port is in use, or other critical server error
    });

  } catch (error) {
    console.error('тЭМ Failed to start server:', error);
    process.exit(1); // Exit if an error occurs during server initialization
  }
};

// Connect to database and then start server
connectDB().then(() => {
  startServer();
}).catch(error => {
  console.error('тЭМ Failed to initialize (database connection or server start):', error);
  // Optional: If database connection is not critical for dev, you could still try startServer()
  // startServer(); // Uncomment if you want the server to try starting even if DB connection fails
  process.exit(1); // Exit if the entire initialization process fails
});

module.exports = app; // Export the app instance for testing or other modules if needed
